output$p <- ifelse(output$p < 0.001, "<0.001", paste("= ",output$p, sep = ""))
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
} else {
effects <- paste("F(", round(anova_table$Df,2),") = ", round(anova_table$`F value`,2), "; p ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p == 0.000, "<0.001",  paste("= ",output$p, sep = ""))
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
}else if(method == "chisq"){
if(model_data$p.value < 0.001){
return(paste("X2 = ",round(model_data$statistic,2), "; p<0.001", sep = ""))
} else {
return(paste( "X2 = ",round(model_data$statistic,2), "; p = ", round(model_data$p.value,3), sep = ""))
}
}else if(method == "emmeans"){
post_hoc <- model_data
contrasts_index <- grep("estimate", colnames(post_hoc))-1
output <- data.frame(post_hoc[,1:contrasts_index])
if(sum(grepl("t.ratio", colnames(post_hoc))) == 1){
output$report <- paste("t(", round(post_hoc$df,2),") = ", round(post_hoc$t.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ",round(post_hoc$p.value,3)))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else if(sum(grepl("z.ratio", colnames(post_hoc))) == 1){
output$report <- paste("z = ", round(post_hoc$z.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ", round(post_hoc$p.value,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else{
print("Unknown format, only results from z and t distributions are available")
}
}else if(method == "mainef_Anova_lme"){
if(typeof(model_data) == "S4"){
if(isLMM(model_data) == TRUE){
return("Only glmer models are implemented in this function for the mainef_Anova method. Try to use mainef_anova as method.")
} else {
require(car)
Anova_model <- as.data.frame(Anova(model_data))
effects <- rownames(Anova_model)
output <- data.frame(effects)
output$report <- paste("X2 = ", round(Anova_model$Chisq,2), "; p", sep = "")
output$p <- ifelse(round(Anova_model$`Pr(>Chisq)`,3) < 0.001, "<0.001", paste("= ", round(Anova_model$`Pr(>Chisq)`,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
}
} else {
return("Only glmer models are implemented in this function for the mainef_Anova method. Try to use mainef_anova as method.")
}
} else if(method == "summary"){
if(typeof(model_data) == "S4"){
summary_model <- summary(model_data)
coefs <- as.data.frame(summary_model$coefficients)
effects <- rownames(coefs)
output <- data.frame(effects)
if(isLMM(model_data) == TRUE){
output$report <- paste("t(", round(coefs$df,2), ") = ", round(coefs$`t value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|t|)`,3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|t|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
} else {
output$report <- paste("z = ", round(coefs$`z value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|z|)`, 3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|z|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
}
} else {
summary_model <- summary(model_data)
coefs <- as.data.frame(summary_model$coefficients)
effects <- rownames(coefs)
output <- data.frame(effects)
output$report <- paste("t = ", round(coefs$`t value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|t|)`,3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|t|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
}
} else{
return("Non-supported method. Try either mainef_anova, mainef_Anova, summary, emmeans, or chisq")
}
}
report_results(model_glmer, method = "mainef_Anova_lme")
report_results <- function(model_data, method){
require(lme4)
if(method == "mainef_anova"){
anova_table <- anova(model_data)
if(typeof(model_data) == "S4"){
if(isGLMM(model_data) == TRUE){
return("Only lm and lmer models are implemented in this function for the mainef_anova method. Try to use mainef_Anova as method.")
} else {
effects <- paste("F(", round(anova_table$NumDF,2),",",round(anova_table$DenDF,2), ") = ", round(anova_table$`F value`,2), "; p ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p < 0.001, "<0.001", paste("= ",output$p, sep = ""))
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
} else {
effects <- paste("F(", round(anova_table$Df,2),") = ", round(anova_table$`F value`,2), "; p ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p == 0.000, "<0.001",  paste("= ",output$p, sep = ""))
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
}else if(method == "chisq"){
if(model_data$p.value < 0.001){
return(paste("X2 = ",round(model_data$statistic,2), "; p<0.001", sep = ""))
} else {
return(paste( "X2 = ",round(model_data$statistic,2), "; p = ", round(model_data$p.value,3), sep = ""))
}
}else if(method == "emmeans"){
post_hoc <- model_data
contrasts_index <- grep("estimate", colnames(post_hoc))-1
output <- data.frame(post_hoc[,1:contrasts_index])
if(sum(grepl("t.ratio", colnames(post_hoc))) == 1){
output$report <- paste("t(", round(post_hoc$df,2),") = ", round(post_hoc$t.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ",round(post_hoc$p.value,3)))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else if(sum(grepl("z.ratio", colnames(post_hoc))) == 1){
output$report <- paste("z = ", round(post_hoc$z.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ", round(post_hoc$p.value,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else{
print("Unknown format, only results from z and t distributions are available")
}
}else if(method == "mainef_Anova"){
if(typeof(model_data) == "S4"){
if(isLMM(model_data) == TRUE){
return("Only glmer models are implemented in this function for the mainef_Anova method. Try to use mainef_anova as method.")
} else {
require(car)
Anova_model <- as.data.frame(Anova(model_data))
effects <- rownames(Anova_model)
output <- data.frame(effects)
output$report <- paste("X2 = ", round(Anova_model$Chisq,2), "; p", sep = "")
output$p <- ifelse(round(Anova_model$`Pr(>Chisq)`,3) < 0.001, "<0.001", paste("= ", round(Anova_model$`Pr(>Chisq)`,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
}
} else {
return("Only glmer models are implemented in this function for the mainef_Anova method. Try to use mainef_anova as method.")
}
} else if(method == "summary"){
if(typeof(model_data) == "S4"){
summary_model <- summary(model_data)
coefs <- as.data.frame(summary_model$coefficients)
effects <- rownames(coefs)
output <- data.frame(effects)
if(isLMM(model_data) == TRUE){
output$report <- paste("t(", round(coefs$df,2), ") = ", round(coefs$`t value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|t|)`,3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|t|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
} else {
output$report <- paste("z = ", round(coefs$`z value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|z|)`, 3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|z|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
}
} else {
summary_model <- summary(model_data)
coefs <- as.data.frame(summary_model$coefficients)
effects <- rownames(coefs)
output <- data.frame(effects)
output$report <- paste("t = ", round(coefs$`t value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|t|)`,3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|t|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
}
} else{
return("Non-supported method. Try either mainef_anova, mainef_Anova, summary, emmeans, or chisq")
}
}
report_results(model_glmer, method = "mainef_Anova")
post_hocs_lm <- emmeans(model_lm, list(pairwise ~ trigger), adjust = "tukey")
post_hocs_lm <- as.data.frame(post_hocs_lm$`pairwise differences of trigger`)
report_results(post_hocs_lm, method = "emmeans")
report_results(post_hocs_lmer, method = "emmeans")
report_results(post_hocs_glmer, method = "emmeans")
report_results(model_chi, method = "chisq")
report_results(model_lm, method = "mainef_anova")
report_results(model_lm, method = "summary")
report_results(model_lm, method = "mainef_Anova")
report_results(model_lmer, method = "mainef_anova")
report_results(model_lmer, method = "summary")
report_results(model_lmer, method = "mainef_Anova")
report_results(model_glmer, method = "mainef_anova")
report_results(model_lmer, method = "mainef_anova")
report_results(model_glmer, method = "mainef_anova")
report_results(model_glmer, method = "summary")
report_results(model_glmer, method = "mainef_Anova")
report_results(post_hocs_lm, method = "emmeans")
report_results(post_hocs_lmer, method = "emmeans")
report_results(post_hocs_glmer, method = "emmeans")
report_results(model_chi, method = "chisq")
report_results <- function(model_data, method){
require(lme4)
# Method anova (model) -> supports lm and lmer
if(method == "mainef_anova"){
anova_table <- anova(model_data)
if(typeof(model_data) == "S4"){
if(isGLMM(model_data) == TRUE){
return("Only lm and lmer models are implemented in this function for the mainef_anova method. Try to use mainef_Anova as method.")
} else {
effects <- paste("F(", round(anova_table$NumDF,2),",",round(anova_table$DenDF,2), ") = ", round(anova_table$`F value`,2), "; p ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p < 0.001, "<0.001", paste("= ",output$p, sep = ""))
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
} else {
effects <- paste("F(", round(anova_table$Df,2),") = ", round(anova_table$`F value`,2), "; p ", sep = "")
names_eff <- rownames(anova_table)
output <- data.frame(names_eff, effects)
output$p <- round(anova_table$`Pr(>F)`,3)
output$p <- ifelse(output$p == 0.000, "<0.001",  paste("= ",output$p, sep = ""))
output$effects <- paste(output$effects, output$p, sep = "")
output$p <- NULL
return(output)
}
# Method "chisq" supports chisq.test() models
}else if(method == "chisq"){
if(model_data$p.value < 0.001){
return(paste("X2 = ",round(model_data$statistic,2), "; p<0.001", sep = ""))
} else {
return(paste( "X2 = ",round(model_data$statistic,2), "; p = ", round(model_data$p.value,3), sep = ""))
}
# Method "emmeans" supports as.data.frame(emmeans_model$pairwise...)
}else if(method == "emmeans"){
post_hoc <- model_data
contrasts_index <- grep("estimate", colnames(post_hoc))-1
output <- data.frame(post_hoc[,1:contrasts_index])
if(sum(grepl("t.ratio", colnames(post_hoc))) == 1){
output$report <- paste("t(", round(post_hoc$df,2),") = ", round(post_hoc$t.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ",round(post_hoc$p.value,3)))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else if(sum(grepl("z.ratio", colnames(post_hoc))) == 1){
output$report <- paste("z = ", round(post_hoc$z.ratio,2), "; p", sep = "")
output$p <- post_hoc$p.value
output$p <- ifelse(post_hoc$p.value < 0.001, "<0.001", paste("= ", round(post_hoc$p.value,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
} else{
print("Unknown format, only results from z and t distributions are available")
}
# Method "mainef_Anova" supports only glmer() models
}else if(method == "mainef_Anova"){
if(typeof(model_data) == "S4"){
if(isLMM(model_data) == TRUE){
return("Only glmer models are implemented in this function for the mainef_Anova method. Try to use mainef_anova as method.")
} else {
require(car)
Anova_model <- as.data.frame(Anova(model_data))
effects <- rownames(Anova_model)
output <- data.frame(effects)
output$report <- paste("X2 = ", round(Anova_model$Chisq,2), "; p", sep = "")
output$p <- ifelse(round(Anova_model$`Pr(>Chisq)`,3) < 0.001, "<0.001", paste("= ", round(Anova_model$`Pr(>Chisq)`,3), sep = ""))
output$report <- paste(output$report, output$p)
output$p <- NULL
return(output)
}
} else {
return("Only glmer models are implemented in this function for the mainef_Anova method. Try to use mainef_anova as method.")
}
# Method "summary" supports lm(), lmer() and glmer() models
} else if(method == "summary"){
if(typeof(model_data) == "S4"){
summary_model <- summary(model_data)
coefs <- as.data.frame(summary_model$coefficients)
effects <- rownames(coefs)
output <- data.frame(effects)
if(isLMM(model_data) == TRUE){
output$report <- paste("t(", round(coefs$df,2), ") = ", round(coefs$`t value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|t|)`,3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|t|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
} else {
output$report <- paste("z = ", round(coefs$`z value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|z|)`, 3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|z|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
}
} else {
summary_model <- summary(model_data)
coefs <- as.data.frame(summary_model$coefficients)
effects <- rownames(coefs)
output <- data.frame(effects)
output$report <- paste("t = ", round(coefs$`t value`,2), "; p ", sep = "")
output$p <- ifelse(round(coefs$`Pr(>|t|)`,3) < 0.001, "<0.001", paste("= ", round(coefs$`Pr(>|t|)`,3), sep = ""))
output$report <- paste(output$report, output$p, sep = "")
output$p <- NULL
return(output)
}
# If the method is not one of these:
} else{
return("Non-supported method. Try either mainef_anova, mainef_Anova, summary, emmeans, or chisq")
}
}
report_results(model_lm, method = "mainef_anova")
report_results(model_lm, method = "summary")
report_results(model_lm, method = "mainef_Anova")
report_results(model_lmer, method = "mainef_anova")
report_results(model_lmer, method = "summary")
report_results(model_lmer, method = "mainef_Anova")
report_results(model_glmer, method = "mainef_anova")
report_results(model_glmer, method = "summary")
report_results(model_glmer, method = "mainef_Anova")
report_results(post_hocs_lm, method = "emmeans")
report_results(post_hocs_lmer, method = "emmeans")
report_results(post_hocs_glmer, method = "emmeans")
report_results(model_chi, method = "chisq")
library(devtools)
document()
install_github("EricMenetre/NPL")
citation(NPL)
citation("NPL")
library(devtools)
?install_github
library(nlme)
as.data.frame(VarCorr(model)^2)
ICC_ranef <- function(model){
require(nlme)
var_mod <- as.data.frame(VarCorr(model)^2)
var_names <- var_mod$grp[1:(NROW(var_mod)-1)]
output <- data.frame(var_names)
output$ICC <- NA
var_tot <- sum(var_mod$vcov)
for(i in 1:nrow(output)){
output$ICC[i] <- paste(round((var_mod$vcov[i]/var_tot)*100,2), "%", sep = "")
}
return(output)
}
library(devtools)
document()
library(devtools)
document()
install_github("EricMenetre/NPL")
library(NPL)
library(devtools)
document()
install_github("EricMenetre/NPL")
import_stats_Ragu <- function(path, n_maps, n_conditions){
library(readxl)
library(tidyr)
library(dplyr)
library(stringr)
#' Each maps are represented as a sheet in the Excel file.
#' We need to create an array with the names of each sheet.
sheets <- paste("Class_", 1:n_maps, sep = "")
maps <- paste("Map_", 1:n_maps, sep = "")
#import the data
data_list <- list()
for(i in 1:n_maps){
data_temp <- read_excel(path, sheet = sheets[i])
data_temp$maps <- maps[i]
data_list[[i]] <- data_temp
}
data_full <- do.call(rbind, data_list)
# Re-arrange the data
#data_AUC
index_AUC <- 1
conditions <- 1:(n_conditions+1)
for(i in 2:length(conditions)){
if (i == 2){
index_AUC[i] <- index_AUC[i-1] + 4
} else {
index_AUC[i] <- index_AUC[i-1] + 6
}
}
index_AUC[length(index_AUC)+1] <- length(data_full)
data_AUC <- data_full[,index_AUC]
data_AUC <- data_AUC%>%
pivot_longer(
cols = ends_with("_AUC"),
names_to = "conditions",
values_to = "AUC")%>%
mutate(conditions = str_replace(conditions, "_AUC", ""))
# data_onset
index_onset <- 1
for(i in 2:length(conditions)){
if (i == 2){
index_onset[i] <- index_onset[i-1] + 1
} else {
index_onset[i] <- index_onset[i-1] + 6
}
}
index_onset[length(index_onset)+1] <- length(data_full)
data_onset <- data_full[,index_onset]
data_onset <- data_onset%>%
pivot_longer(
cols = ends_with("_On"),
names_to = "conditions",
values_to = "onset")%>%
mutate(conditions = str_replace(conditions, "_On", ""))
# data_offset
index_offset <- 1
for(i in 2:length(conditions)){
if (i == 2){
index_offset[i] <- index_offset[i-1] + 2
} else {
index_offset[i] <- index_offset[i-1] + 6
}
}
index_offset[length(index_offset)+1] <- length(data_full)
data_offset <- data_full[,index_offset]
data_offset <- data_offset%>%
pivot_longer(
cols = ends_with("_Off"),
names_to = "conditions",
values_to = "offset")%>%
mutate(conditions = str_replace(conditions, "_Off", ""))
# data_duration
index_duration <- 1
for(i in 2:length(conditions)){
if (i == 2){
index_duration[i] <- index_duration[i-1] + 3
} else {
index_duration[i] <- index_duration[i-1] + 6
}
}
index_duration[length(index_duration)+1] <- length(data_full)
data_duration <- data_full[,index_duration]
data_duration <- data_duration%>%
pivot_longer(
cols = ends_with("_Dur"),
names_to = "conditions",
values_to = "duration")%>%
mutate(conditions = str_replace(conditions, "_Dur", ""))
# data_COG
index_COG <- 1
for(i in 2:length(conditions)){
if (i == 2){
index_COG[i] <- index_COG[i-1] + 5
} else {
index_COG[i] <- index_COG[i-1] + 6
}
}
index_COG[length(index_COG)+1] <- length(data_full)
data_COG <- data_full[,index_COG]
data_COG <- data_COG%>%
pivot_longer(
cols = ends_with("_COG"),
names_to = "conditions",
values_to = "COG")%>%
mutate(conditions = str_replace(conditions, "_COG", ""))
#data_GFP
index_GFP <- 1
for(i in 2:length(conditions)){
if (i == 2){
index_GFP[i] <- index_GFP[i-1] + 6
} else {
index_GFP[i] <- index_GFP[i-1] + 6
}
}
index_GFP[length(index_GFP)+1] <- length(data_full)
data_GFP <- data_full[,index_GFP]
data_GFP <- data_GFP%>%
pivot_longer(
cols = ends_with("_GFP"),
names_to = "conditions",
values_to = "GFP")%>%
mutate(conditions = str_replace(conditions, "_GFP", ""))
# Merging the data
data_merged <- data_onset%>%
left_join(data_offset,by = c("SubjectID", "maps", "conditions"))%>%
left_join(data_duration,by = c("SubjectID", "maps", "conditions"))%>%
left_join(data_AUC,by = c("SubjectID", "maps", "conditions"))%>%
left_join(data_COG,by = c("SubjectID", "maps", "conditions"))%>%
left_join(data_GFP,by = c("SubjectID", "maps", "conditions"))
# end
return(data_merged)
}
library(devtools)
document()
install_github("EricMenetre/NPL")
