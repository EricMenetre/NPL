data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = time-0.1, xend = time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else{
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
}
return(plot_list)
}
do.call(ggarrange,plot_microstates(path_.seg = path_.seg,
time_ms = time_ms,
size_hist = size_hist,
palette = "Blues"))
do.call(ggarrange,plot_microstates(path_.seg = path_.seg,
time_ms = time_ms,
size_hist = size_hist))
path_.seg <- "C:/Users/EricM/Desktop/Fit microstates_maps_BW_elderly.Groups1-3.seg"
plot_microstates(path_.seg = path_.seg,
time_ms = time_ms)
plot_microstates(path_.seg = path_.seg)
read_seg_file(path_.seg)
temp <- read_seg_file(path_.seg)
str(temp)
View(temp)
typeof(temp$time)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
ncol(data_ms)
# List of plots
ncol_data <- ncol(data_ms)
(ncol_data-1)/5
n_conditions <- (ncol_data-1)/5
plot_list <- list()
grep("GFP", colnames(data_ms))
grep("Seg", colnames(data_ms))
i = 1
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = time-0.1, xend = time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
palette <- "Spectral"
ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = time-0.1, xend = time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
data_plot
ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
path_.seg <- "C:/Users/EricM/Desktop/Fit microstates_maps_BW_elderly.Groups1-3.seg"
size_hist <- 2
palette <- "Spectral"
plot_microstates <- function(path_.seg, time_ms = "none", size_hist = 2, palette = "Spectral"){
require(ggplot2)
require(ggpubr)
require(RColorBrewer)
require(readr)
require(dplyr)
require(NPL)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
# Offer the possibility to the user to add a column with the time in ms
if(time_ms != "none"){
data_ms$time <- time_ms
}
# List of plots
ncol_data <- ncol(data_ms)
n_conditions <- (ncol_data-1)/5
plot_list <- list()
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
if(time_ms == "none"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else{
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
}
return(plot_list)
}
plot_microstates(path_.seg = path_.seg)
do.call(ggarrange,plot_microstates(path_.seg = path_.seg))
seq(-500, -100, by = 4)
time_ms <- seq(-500, -100, by = 4)
plot_microstates(path_.seg = path_.seg, time_ms = time_ms)
time_ms <- seq(-500, -99, by = 4)
plot_microstates(path_.seg = path_.seg, time_ms = time_ms)
seq(-500, -99, by = 4)
time_ms <- seq(-500, -98, by = 4)
seq(-500, -98, by = 4)
seq(-500, -96, by = 4)
time_ms <- seq(-500, -96, by = 4)
plot_microstates(path_.seg = path_.seg, time_ms = time_ms)
seq(-500, -104, by = 4)
time_ms <- seq(-500, -104, by = 4)
plot_microstates(path_.seg = path_.seg, time_ms = time_ms)
plot_microstates <- function(path_.seg, FWBW = "FW", time_ms = "none", size_hist = 2, palette = "Spectral"){
require(ggplot2)
require(ggpubr)
require(RColorBrewer)
require(readr)
require(dplyr)
require(NPL)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
# Offer the possibility to the user to add a column with the time in ms
if(time_ms != "none"){
data_ms$time <- time_ms
}
# List of plots
ncol_data <- ncol(data_ms)
n_conditions <- (ncol_data-1)/5
plot_list <- list()
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
if(time_ms == "none"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else{
if(FWBW == "FW"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
} else {
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
#geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
}
}
}
return(plot_list)
}
plot_microstates <- function(path_.seg, FWBW = "FW", time_ms = "none", size_hist = 2, palette = "Spectral"){
require(ggplot2)
require(ggpubr)
require(RColorBrewer)
require(readr)
require(dplyr)
require(NPL)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
# Offer the possibility to the user to add a column with the time in ms
if(time_ms != "none"){
data_ms$time <- time_ms
}
# List of plots
ncol_data <- ncol(data_ms)
n_conditions <- (ncol_data-1)/5
plot_list <- list()
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
if(time_ms == "none"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else{
if(FWBW == "FW"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else {
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
#geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
}
}
return(plot_list)
}
plot_microstates(path_.seg = path_.seg, time_ms = time_ms)
plot_microstates(path_.seg = path_.seg, time_ms = time_ms, FWBW = "BW")
plot_microstates <- function(path_.seg, vline_onset = FALSE, time_ms = "none", size_hist = 2, palette = "Spectral"){
require(ggplot2)
require(ggpubr)
require(RColorBrewer)
require(readr)
require(dplyr)
require(NPL)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
# Offer the possibility to the user to add a column with the time in ms
if(time_ms != "none"){
data_ms$time <- time_ms
}
# List of plots
ncol_data <- ncol(data_ms)
n_conditions <- (ncol_data-1)/5
plot_list <- list()
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
if(time_ms == "none"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else{
if(FWBW == "FW"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else {
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
#geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
}
}
return(plot_list)
}
plot_microstates <- function(path_.seg, vline_onset = FALSE, time_ms = "none", size_hist = 2, palette = "Spectral"){
require(ggplot2)
require(ggpubr)
require(RColorBrewer)
require(readr)
require(dplyr)
require(NPL)
# Importation of the data
data_ms <- read_seg_file(path_.seg)
# Offer the possibility to the user to add a column with the time in ms
if(time_ms != "none"){
data_ms$time <- time_ms
}
# List of plots
ncol_data <- ncol(data_ms)
n_conditions <- (ncol_data-1)/5
plot_list <- list()
index_col_GFP <- grep("GFP", colnames(data_ms))
index_col_Seg <- grep("Seg", colnames(data_ms))
if(time_ms == "none"){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else{
if(vline_onset == TRUE){
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
} else if (vline_onset == FALSE) {
for(i in 1:n_conditions){
time = as.numeric(simplify2array(data_ms[,"time"]))
GFP = as.numeric(simplify2array(data_ms[,index_col_GFP[i]]))
Seg = as.factor(simplify2array(data_ms[,index_col_Seg[i]]))
data_plot <- data.frame(time,GFP, Seg)
data_plot$Seg[data_plot$Seg == 0] <- NA
data_plot <- data_plot%>%rename(Maps = Seg,
Time = time)
rm(time, GFP, Seg)
plot_list[[i]] <- ggplot(data_plot, aes(x = Time, y = GFP))+
geom_segment(aes(x = Time-0.1, xend = Time+0.1, y = 0, yend = GFP, color = Maps), size = size_hist)+
geom_area(fill = "gray", alpha = 0.2)+
geom_line(col = "black", size = 0.8)+
#geom_vline(xintercept = 0, col = "black", alpha = 0.8, size = 0.7)+
theme_minimal()+
labs(y = "GFP amplitude in mv")+
scale_color_brewer(palette = palette)
}
}
}
return(plot_list)
}
plot_microstates(path_.seg = path_.seg, time_ms = time_ms, vline_onset = TRUE)
path_.seg <- "C:/Users/EricM/Desktop/verification topo/Data Cartool/test fitting maps/Fit Maps FW_ICN_5maps/Fit Maps FW_ICN_5maps.Group1.seg"
plot_microstates(path_.seg = path_.seg, time_ms = time_ms, vline_onset = TRUE)
time_ms <- c(seq(-100, 0, by = 4), seq(5,520, by = 4))
plot_microstates(path_.seg = path_.seg, time_ms = time_ms, vline_onset = TRUE)
plot_microstates(path_.seg = path_.seg, time_ms = time_ms, vline_onset = FALSE)
library(devtools)
document()
document()
install_github("EricMenetre/NPL")
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
